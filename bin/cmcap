#!/usr/bin/env ruby

require 'bundler/setup'
require 'cointools/coinmarketcap'

require 'optparse'
require 'time'

def print_help
  puts "Usage: #{$PROGRAM_NAME} <coin_name> [-b/--btc-price] [-cXXX/--convert-to XXX] [-q/--quiet]"
  puts " e.g.: #{$PROGRAM_NAME} litecoin"
  puts
  puts "* To look up the currency by symbol instead of name (slower, downloads more data):"
  puts "       #{$PROGRAM_NAME} -s/--symbol <symbol> [-b/--btc-price] [-cXXX/--convert-to XXX] [-q/--quiet]"
  puts " e.g.: #{$PROGRAM_NAME} -s LTC"
  puts
  puts "* To list supported fiat currencies:"
  puts "       #{$PROGRAM_NAME} --fiat-currences"
  puts
  puts "* -b / --btc-price: returns the coin's price in BTC instead of USD"
  puts "* -cEUR / --convert-to EUR: returns the price in a given fiat currency instead of USD"
end

quiet = false
btc_price = false
fiat_currency = nil
symbol = nil

OptionParser.new do |opts|
  opts.on('-q', '--quiet') { quiet = true }
  opts.on('-b', '--btc-price') { btc_price = true }
  opts.on('-cXXX', '--convert-to XXX') { |f| fiat_currency = f }

  opts.on('--fiat-currencies') do
    puts CoinTools::CoinMarketCap::FIAT_CURRENCIES
    exit 0
  end

  opts.on('-h', '--help') do
    print_help
    exit 0
  end

  opts.on('-sSYMBOL', '--symbol SYMBOL') { |s| symbol = s }

  opts.parse!
end

unless symbol
  if ARGV.length != 1
    print_help
    exit 1
  end

  coin_name = ARGV[0].downcase
end

if fiat_currency && btc_price
  puts "#{$PROGRAM_NAME}: --btc-price and --convert-to options cannot be used together"
  exit 1
end

begin
  if symbol
    result = CoinTools::CoinMarketCap.new.get_price_by_symbol(symbol, convert_to: fiat_currency)
  else
    result = CoinTools::CoinMarketCap.new.get_price(coin_name, convert_to: fiat_currency)
  end

  if btc_price
    price = result.btc_price
    unit = 'BTC'
  elsif fiat_currency
    price = result.converted_price
    unit = fiat_currency.upcase
  else
    price = result.usd_price
    unit = 'USD'
  end

  if quiet
    puts price
  else
    puts "#{symbol&.upcase || coin_name} @ #{result.time || Time.now} ==> #{price} #{unit}"
    puts
  end
rescue CoinTools::InvalidSymbolError => e
  $stderr.puts "Error: Invalid coin name: '#{symbol}'"
  exit 1
rescue CoinTools::InvalidFiatCurrencyError => e
  $stderr.puts "Error: Unsupported fiat currency: '#{fiat_currency}'"
  exit 1
rescue CoinTools::UnknownCoinError => e
  if symbol
    $stderr.puts "Error: No such coin: #{symbol.upcase}"
  else
    $stderr.puts "Error: No such coin: #{coin_name} (remember to use CoinMarketCap's IDs, or the -s option)"
  end
  exit 1
rescue CoinTools::ResponseError => e
  $stderr.puts "Error: Something went wrong: #{e.nice_message}"
  exit 1
end
