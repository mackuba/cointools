#!/usr/bin/env ruby

require 'bundler/setup'
require 'cointools/cryptowatch'

require 'optparse'

def print_help
  puts "Usage: #{$PROGRAM_NAME} <exchange> <market> [<date>] [-v/--verbose] [-f/--fast]"
  puts " e.g.: #{$PROGRAM_NAME} gdax btcusd \"2017-06-30 15:27\""
  puts
  puts "* --fast: tries to use less API time allowance at the cost of worse reliability"
  puts "* To print a list of available exchanges:"
  puts "       #{$PROGRAM_NAME} --list-exchanges"
  puts "* To print a list of available markets on an exchange:"
  puts "       #{$PROGRAM_NAME} --list-markets kraken"
end

verbose = false
fast = false

OptionParser.new do |opts|
  opts.on('-v', '--verbose') { verbose = true }

  opts.on('-h', '--help') do
    print_help
    exit 0
  end

  opts.on('-f', '--fast') { fast = true }

  opts.on('--list-exchanges') do
    puts CoinTools::Cryptowatch.new.exchanges
    exit 0
  end

  opts.on('--list-markets EXCHANGE') do |exchange|
    begin
      puts CoinTools::Cryptowatch.new.get_markets(exchange)
      exit 0
    rescue CoinTools::InvalidExchangeError => e
      $stderr.puts "Error: Invalid exchange name: '#{exchange}'"
      exit 1
    rescue CoinTools::UnknownExchangeError => e
      $stderr.puts "Error: Unknown exchange: #{exchange}"
      exit 1
    rescue CoinTools::ResponseError => e
      $stderr.puts "Error: Something went wrong: #{e.nice_message}"
      exit 1
    end
  end

  opts.parse!
end

if ARGV.length < 2 || ARGV.length > 3
  print_help
  exit 1
end

exchange = ARGV[0].downcase
market = ARGV[1].downcase
date = ARGV[2]

begin
  method = fast ? :get_price_fast : :get_price
  result = CoinTools::Cryptowatch.new.send(method, exchange, market, date)

  if verbose
    puts "#{exchange}:#{market} @ #{result.time || Time.now} ==> #{result.price}"
    puts
  else
    puts result.price
  end
rescue CoinTools::InvalidExchangeError => e
  $stderr.puts "Error: Invalid exchange name: '#{exchange}'"
  exit 1
rescue CoinTools::InvalidSymbolError => e
  $stderr.puts "Error: Invalid market name: '#{market}'"
  exit 1
rescue CoinTools::InvalidDateError => e
  $stderr.puts "Error: Invalid date format: '#{date}' (#{e})"
  exit 1
rescue CoinTools::UnknownCoinError => e
  $stderr.puts "Error: Unknown exchange/market pair: #{exchange}/#{market}"
  exit 1
rescue CoinTools::ResponseError => e
  $stderr.puts "Error: Something went wrong: #{e.nice_message}"
  exit 1
end
