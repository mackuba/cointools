#!/usr/bin/env ruby

require 'bundler/setup'
require 'cointools/coincap'

require 'optparse'

def print_help
  puts "Usage: #{$PROGRAM_NAME} <symbol> [<date>] [-b/--btc-price | -e/--eur-price] [-q/--quiet]"
  puts " e.g.: #{$PROGRAM_NAME} NANO \"2017-12-20 15:00\""
  puts
  puts "* -b / --btc-price: returns the coin's price in BTC instead of USD (current prices only)"
  puts "* -e / --eur-price: returns the coin's price in EUR (current prices only)"
end

quiet = false
btc_price = false
eur_price = false

OptionParser.new do |opts|
  opts.on('-q', '--quiet') { quiet = true }
  opts.on('-b', '--btc-price') { btc_price = true }
  opts.on('-e', '--eur-price') { eur_price = true }

  opts.on('-h', '--help') do
    print_help
    exit 0
  end

  opts.parse!
end

if ARGV.length < 1 || ARGV.length > 2
  print_help
  exit 1
end

symbol = ARGV[0]
date = ARGV[1]

begin
  if eur_price && btc_price
    puts "#{$PROGRAM_NAME}: --btc-price and --eur-price options cannot be used together"
    exit 1
  end

  if date && (eur_price || btc_price)
    puts "#{$PROGRAM_NAME}: --btc-price and --eur-price options cannot be used for historical prices"
    exit 1
  end

  result = CoinTools::CoinCap.new.get_price(symbol, date)

  if btc_price
    price = result.btc_price
    unit = 'BTC'
  elsif eur_price
    price = result.eur_price
    unit = 'EUR'
  else
    price = result.usd_price
    unit = 'USD'
  end

  if quiet
    puts price
  else
    puts "#{symbol.upcase} @ #{result.time || Time.now} ==> #{price} #{unit}"
    puts
  end
rescue CoinTools::InvalidSymbolError => e
  $stderr.puts "Error: Invalid coin name: '#{symbol}'"
  exit 1
rescue CoinTools::InvalidDateError => e
  $stderr.puts "Error: Invalid date format: '#{date}' (#{e})"
  exit 1
rescue CoinTools::UnknownCoinError => e
  $stderr.puts "Error: No such coin: #{symbol.upcase}"
  exit 1
rescue CoinTools::ResponseError => e
  $stderr.puts "Error: Something went wrong: #{e.nice_message}"
  exit 1
end
